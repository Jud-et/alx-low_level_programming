!<arch>
0-isupper.c/    0           0     0     644     246       `
#include "main.h"
#include <ctype.h>

/**
* _isupper - checks for uppercase letters
*
* @c: parametr to be printed
*
* Return: 0 or 1 depending on the condition
*/
int _isupper(int c)
{
if (isupper(c))
{

return (1);

}
else
{

return (0);

}

}
0-memset.c/     0           0     0     644     325       `
#include "main.h"

/**
* _memset - fills memory with a constant byte
* @s: memory space to be filled
* @b: byte to fill with
* @n: number of spaces to fill
*
* Return: pointer to memory area s
*/
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(s + i) = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     328       `
#include "main.h"

/**
* _strcat - appends src to the dest string
* @dest: string to append by src
* @src: string to append to dest
*
* Return: address of dest
*/
char *_strcat(char *dest, char *src)
{
	int i, j;

	i = j = 0;
	while (*(dest + i))
		i++;
	while ((*(dest + i) = *(src + j)))
	{
		i++;
		j++;
	}
	return (dest);
}
100-atoi.c/     0           0     0     644     415       `
#include "main.h"

/**
* _atoi - converts a string to an integer
* @s: string to convert
*
* Return: value of integer
*/
int _atoi(char *s)
{
	int i, j, n, m;

	i = n = 0;
	m = 1;
	while ((*(s + i) < '0' || *(s + i) > '9') && (*(s + i) != '\0'))
	{
		if (*(s + i) == '-')
			m *= -1;
		i++;
	}
	j = i;
	while ((*(s + j) >= '0') && (*(s + j) <= '9'))
	{
		n = n * 10 + m * (*(s + j) - '0');
		j++;
	}
	return (n);
}

1-isdigit.c/    0           0     0     644     218       `
#include "main.h"
#include <ctype.h>

/**
* _isdigit - check for numbers
*
* @c: parameter to print
*
* Return: 0 or 1
*/



int _isdigit(int c)
{
if (c >= '0' && c <= '9')
{

return (1);

}

else
{

return (0);

}

}
1-memcpy.c/     0           0     0     644     322       `
#include "main.h"

/**
* _memcpy - copies memory area
* @dest: destination of copy
* @src: memory area to copy
* @n: number of bytes to copy
*
* Return: pointer to dest
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(dest + i) = *(src + i);
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     438       `
#include "main.h"

/**
* _strncat - appends src to the dest string
* @dest: string to append by src
* @src: string to append to dest
* @n: largest number of bytes to append
*
* Return: address of dest
*/
char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	i = j = 0;
	while (*(dest + i))
		i++;
	while (j < n && *(src + j))
	{
		*(dest + i) = *(src + j);
		i++;
		j++;
	}
	if (j < n)
		*(dest + i) = *(src + j);
	return (dest);
}
2-strchr.c/     0           0     0     644     345       `
#include "main.h"

/**
 * _strchr - locates a character in a string
 * @s: string to check
 * @c: character to check for
 *
 * Return: pointer to spot in s with c or null
 */
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; *(s + i); i++)
	{
		if (*(s + i) == c)
			return (s + i);
	}
	if (*(s + i) == c)
		return (s + i);
	return (0);
}


2-strlen.c/     0           0     0     644     200       `
#include "main.h"

/**
* _strlen - returns the length of a string
* @s: string to find length of
*
* Return: length of s
*/
int _strlen(char *s)
{
	int i = 0;

	while (*(s + i))
		i++;
	return (i);
}
2-strncpy.c/    0           0     0     644     403       `
#include "main.h"

/**
* _strncpy - cpoies n bytes of src to the dest string
* @dest: string to copy to
* @src: string being copied
* @n: largest number of bytes to copy
*
* Return: address of dest
*/
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	i = 0;
	while (i < n && *(src + i))
	{
		*(dest + i) = *(src + i);
		i++;
	}
	while (i < n)
	{
		*(dest + i) = '\0';
		i++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     240       `
#include "main.h"
/**
* _islower - function to check for lowercase character
* @c:  is the int that will use for the argument of the function
* Return: 0
*/
int _islower(int c)
{
if (c >= 'a' && c <= 'z')
{
return (1);
}
else
return (0);
}
3-puts.c/       0           0     0     644     216       `
#include "main.h"

/**
* _puts - prints a string in stdout
* @str: string to print
*
* Return: void
*/
void _puts(char *str)
{
	int i = 0;

	while (*(str + i))
	{
		_putchar(*(str + i));
		i++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     298       `
#include "main.h"

/**
* _strcmp - compares two strings
* @s1: first string
* @s2: second string
*
* Return: outputs the difference of s1 and s2
*/
int _strcmp(char *s1, char *s2)
{
	int i = 0;

	while (*(s1 + i) && *(s2 + i) && (*(s1 + i) == *(s2 + i)))
		i++;
	return (*(s1 + i) - *(s2 + i));
}

3-strspn.c/     0           0     0     644     392       `
#include "main.h"

/**
 * _strspn - gets lengthof a prefix substring
 * @s: string to check
 * @accept: string to check against
 *
 * Return: number of bytes of s in accept
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; s[i]; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
				break;
		}
		if (!accept[j])
			break;
	}
	return (i);
}
4-isalpha.c/    0           0     0     644     285       `
#include "main.h"
/**
* _isalpha - function to check if c is a letter, lowercase or uppercase
* @c: is the int that will use for the argument of the function
* Return: 0
*/

int _isalpha(int c)
{
if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
{
return (1);
}
else
return (0);
}

4-strpbrk.c/    0           0     0     644     430       `
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: string to check
 * @accept: string to check against
 *
 * Return: pointer to byte in s that matches or NULL if no match
 */
char *_strpbrk(char *s, char *accept)
{
	unsigned int i, j;

	for (i = 0; s[i]; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
				break;
		}
		if (accept[j])
			return (s + i);
	}
	return (0);
}

5-strstr.c/     0           0     0     644     545       `
#include "main.h"

/**
 * _strstr - locates a substring
 * @haystack: string in which to check for needle
 * @needle: substring to find in haystack
 *
 * Return: pointer to beginning of needle in haystack or NULL if no match
 */
char *_strstr(char *haystack, char *needle)
{
	unsigned int i = 0, j = 0;

	while (haystack[i])
	{
		while (needle[j] && (haystack[i] == needle[0]))
		{
			if (haystack[i + j] == needle[j])
				j++;
			else
				break;
		}
		if (needle[j])
		{
			i++;
			j = 0;
		}
		else
			return (haystack + i);
	}
	return (0);
}

6-abs.c/        0           0     0     644     265       `
#include "main.h"
#include <stdio.h>
/**
* _abs - function that computes the absolute value of an integer
* @c:  is the int that will use for the argument of the function
* Return: 0
*/
int _abs(int c)
{
if (c > 0 || c == 0)
{
return (c);
}
else
return (c * -1);
}

9-strcpy.c/     0           0     0     644     332       `
#include "main.h"

/**
* _strcpy - copies string pointed to by src to buffer pointed to by dest
* @src: source to copy
* @dest: destination of copy
*
* Return: pointer to dest
*/
char *_strcpy(char *dest, char *src)
{
	int i = 0;

	while (*(src + i))
	{
		*(dest + i) = *(src + i);
		i++;
	}
	*(dest + i) = '\0';
	return (dest);
}

